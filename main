import numpy as np
import time


# Constants
EMPTY = 0
PLAYER = 1
AI = 2
ROW_COUNT = 6
COLUMN_COUNT = 7

# Function to create the initial board
def create_board():
    return np.zeros((ROW_COUNT, COLUMN_COUNT), dtype=int)

# Function to drop a piece into the board
def drop_piece(board, row, col, piece):
    board[row][col] = piece

# Function to check if a column is valid for dropping a piece
def is_valid_location(board, col):
    return board[ROW_COUNT-1][col] == 0

# Function to get the next available row for a piece to be dropped in a column
def get_next_open_row(board, col):
    for r in range(ROW_COUNT):
        if board[r][col] == 0:
            return r

# Function to print the board
def print_board(board):
    print(np.flip(board, 0))

# Function to check for winning condition
def winning_move(board, piece):
    # Check horizontal locations
    for c in range(COLUMN_COUNT-3):
        for r in range(ROW_COUNT):
            if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
                return True

    # Check vertical locations
    for c in range(COLUMN_COUNT):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
                return True

    # Check positively sloped diagonals
    for c in range(COLUMN_COUNT-3):
        for r in range(ROW_COUNT-3):
            if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
                return True

    # Check negatively sloped diagonals
    for c in range(COLUMN_COUNT-3):
        for r in range(3, ROW_COUNT):
            if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
                return True

# Evaluation function for the Minimax algorithm
def evaluate_window(window, piece):
    score = 0
    opp_piece = PLAYER
    if piece == PLAYER:
        opp_piece = AI

    if window.count(piece) == 4:
        score += 100
    elif window.count(piece) == 3 and window.count(EMPTY) == 1:
        score += 5
    elif window.count(piece) == 2 and window.count(EMPTY) == 2:
        score += 2

    if window.count(opp_piece) == 3 and window.count(EMPTY) == 1:
        score -= 4

    return score

# Function to evaluate the entire board
def score_position(board, piece):
    score = 0

    # Score center column
    center_array = [int(i) for i in list(board[:, COLUMN_COUNT//2])]
    center_count = center_array.count(piece)
    score += center_count * 3

    # Score horizontal
    for r in range(ROW_COUNT):
        row_array = [int(i) for i in list(board[r,:])]
        for c in range(COLUMN_COUNT-3):
            window = row_array[c:c+4]
            score += evaluate_window(window, piece)

    # Score vertical
    for c in range(COLUMN_COUNT):
        col_array = [int(i) for i in list(board[:,c])]
        for r in range(ROW_COUNT-3):
            window = col_array[r:r+4]
            score += evaluate_window(window, piece)

    # Score positively sloped diagonal
    for r in range(ROW_COUNT-3):
        for c in range(COLUMN_COUNT-3):
            window = [board[r+i][c+i] for i in range(4)]
            score += evaluate_window(window, piece)

    # Score negatively sloped diagonal
    for r in range(ROW_COUNT-3):
        for c in range(COLUMN_COUNT-3):
            window = [board[r+3-i][c+i] for i in range(4)]
            score += evaluate_window(window, piece)

    return score

# Minimax algorithm
def minimax(board, depth, maximizingPlayer,nodes_per_depth):
    valid_locations = [col for col in range(COLUMN_COUNT) if is_valid_location(board, col)]
    nodes_per_depth[depth] += len(valid_locations)
    # Terminal condition: if depth is 0 or the game is over
    if len(valid_locations) == 0 or winning_move(board, PLAYER) or winning_move(board, AI):
        if winning_move(board, AI):
            return (None, 100000000000000)
        elif winning_move(board, PLAYER):
            return (None, -10000000000000)
        else:
            return (None, 0)
    elif depth == 0:
        return (None, score_position(board, PLAYER))

    if maximizingPlayer:
        value = -np.Inf
        column = np.random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            temp_board = board.copy()
            drop_piece(temp_board, row, col, AI)
            new_score = minimax(temp_board, depth-1, False,nodes_per_depth)[1]
            if new_score > value:
                value = new_score
                column = col
        return column, value
    else:
        value = np.Inf
        column = np.random.choice(valid_locations)
        for col in valid_locations:
            row = get_next_open_row(board, col)
            temp_board = board.copy()
            drop_piece(temp_board, row, col, PLAYER)
            new_score = minimax(temp_board, depth-1, True,nodes_per_depth)[1]
            if new_score < value:
                value = new_score
                column = col
        return column, value

# Main function to play the game
def play_game():
    board = create_board()
    print_board(board)
    game_over = False
    total_time=[]
    nodes_per_depth=[0] * 5

    while not game_over:
        # Player's turn
        if not game_over:
            col = int(input("Player's turn (0-6): "))
            if is_valid_location(board, col):
                row = get_next_open_row(board, col)
                drop_piece(board, row, col, PLAYER)

                if winning_move(board, PLAYER):
                    print("Player wins!")
                    print('Average Time per minimax: ',np.mean(total_time))
                    print("Nodes per Depth: ", nodes_per_depth)
                    game_over = True

                print_board(board)

        # AI's turn
        if not game_over:
            start_time = time.time()
            col, minimax_score = minimax(board, 4, True,nodes_per_depth)
            end_time = time.time()
            total_time.append(end_time-start_time)
            print("Time Taken this turn: ", end_time-start_time)
            if is_valid_location(board, col):
                row = get_next_open_row(board, col)
                drop_piece(board, row, col, AI)

                if winning_move(board, AI):
                    print("AI wins!")
                    print('Average Time per minimax: ',np.mean(total_time))
                    print("Nodes per Depth: ", nodes_per_depth)
                    game_over = True

                print_board(board)

        if np.count_nonzero(board == 0) == 0:
            print("It's a tie!")
            game_over = True

# Play the game
play_game()
